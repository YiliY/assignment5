import sys
sys.path.append("/home/git/assignment5/buj/adventure/")
from unittest import TestCase
from adventure import *

class CommandTest(TestCase):

    def setUp(self):
        game = Game()
        load_advent_dat(game)
        self.words = set(w.synonyms[0].text for w in game.vocabulary.values())
        self.words.remove('suspend')

    def test_intransitive_commands_should_not_throw_exceptions(self):
        for word in self.words:
            game = Game()
            load_advent_dat(game)
            game.start()
            game.do_command(['no'])  # WOULD YOU LIKE INSTRUCTIONS?
            game.do_command([word])

    def test_transitive_commands_should_not_throw_exceptions(self):
        for word in self.words:
            game = Game()
            load_advent_dat(game)
            game.start()
            game.do_command(['no'])  # WOULD YOU LIKE INSTRUCTIONS?
            game.do_command(['enter'])  # so we are next to lamp
            game.do_command([word, 'lamp'])
    
    def test_yes_now_input_handling(self):
        game = Game()
        
        YESNO_ANSWERS = {'y': True, 'yes': True, 'n': False, 'no': False}
        for input_word in YESNO_ANSWERS.keys():
            game.yesno_callback = 'self.assert' + str(YESNO_ANSWERS[input_word])
            game.do_command([input_word])
            
        INVALID_ANSWERS = ['maybe', 'IDK','what would you do?','other!)@#_random_135l_string']
        expected_output = upper('Please answer the question.') + '\n'
        for input_word in INVALID_ANSWERS:
            game.do_command([input_word])
            self.assertEqual(game.output, expected_output)
            
        
        
        